## there are many useful PostgreSQL Performance Monitoring Tools

pgAdmin – Web-based GUI with performance dashboards
pg_stat_statements – Tracks slow queries
PgBouncer – Connection pooling for performance boost
Prometheus + Grafana – Advanced real-time monitoring
pgBadger – Log analysis for finding slow queries

We can monitor slow queries using pg_stat_statements
We can optimize indexes to speed up lookups
We can reduce table bloat with VACUUM
We can monitor locks and deadlocks to avoid conflicts
We can analyze cache hit ratio to tune memory settings

/* We can tune PostgreSQL Settings for Performance
We can modify PostgreSQL configuration in postgresql.conf for large databases */

#This gives More memory for sorting & joins
work_mem = 64MB      

# This helps cache frequently used data
shared_buffers = 256MB

# Now PostgreSQL uses OS cache efficiently
effective_cache_size = 512MB 


## We can Vacuum & Analyze for Performance
## As PostgreSQL doesn’t auto-optimize, so we should run

VACUUM ANALYZE;

## This removes dead tuples and updates statistics.

--Some useful tools

--Check Database Size and find the total size of your database

SELECT pg_size_pretty(pg_database_size('pos'));



-- Check the number of active connections:

SELECT count(*) FROM pg_stat_activity;

-- See details of all running queries:

SELECT pid, state, usename, query_start, query 
FROM pg_stat_activity 
ORDER BY query_start;

-- Identify Slow Queries (pg_stat_statements)
-- Enable pg_stat_statements (if not already enabled):

CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

--Find the slowest queries:

(SELECT query, calls, 
FROM pg_stat_statements 
ORDER BY mean_time DESC 
LIMIT 10;) Not used

-- Check Table Index Usage (pg_stat_user_indexes) to find unused or inefficient indexes:

SELECT relname AS table_name, indexrelname AS index_name, idx_scan, idx_tup_read, idx_tup_fetch 
FROM pg_stat_user_indexes 
ORDER BY idx_scan ASC 
LIMIT 10;


-- Check for bloated tables(Wasted Space)

SELECT schemaname, relname, n_dead_tup, pg_size_pretty(pg_relation_size(relid)) AS table_size
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT 10;

--  Run VACUUM FULL to reclaim space:

VACUUM FULL Movie;

-- Run And check

SELECT schemaname, relname, n_dead_tup, pg_size_pretty(pg_relation_size(relid)) AS table_size
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT 10;

-- Monitor Cache Hit Ratio
-- High cache hit ratio ( > 95%) means PostgreSQL is using memory efficiently.

SELECT sum(heap_blks_hit) / sum(heap_blks_hit + heap_blks_read) AS cache_hit_ratio 
FROM pg_statio_user_tables;

